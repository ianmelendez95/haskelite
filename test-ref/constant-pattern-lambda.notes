(\f. f 1) (\a. (\1. + 3 4) a | ERROR)

(\a. (\1. + 3 4) a | ERROR)

(\1. + 3 4) a
IF (= a 1) (+ 3 4) FAIL
eval_a = IF (= a 1) (+ 3 4) FAIL

<e1> | <e2>
(\eval_a. IF (/= eval_a FAIL) eval_a <e2>) <e1>
where eval_a can be a new name that isn't free in e1 or e2

(\k. E)
(\a_e. IF (= k a_e) E FAIL)

let f = \a. (\1. + 3 4) a | ERROR
in f 1

-- transform constant pattern match
let f = \a. (\a. IF (= 1 a) (+ 3 4) FAIL) a | ERROR 
in f 1

-- transform fat bar
let f = \a. (\b. IF (/= b FAIL) b ERROR) (\a. IF (= 1 a) (+ 3 4) FAIL) a)
in f 1

-- transform let application
(\f. f 1) (\a. (\b. IF (/= b FAIL) b ERROR) (IF (= 1 a) (+ 3 4) FAIL))