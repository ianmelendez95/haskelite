-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Miranda/Parser.y
-----------------------------------------------------------------------------

state 39 contains 1 shift/reduce conflicts.
state 54 contains 3 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 58 contains 9 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 59 contains 9 shift/reduce conflicts and 1 reduce/reduce conflicts.

rule 60 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> program                           (0)
	%start_defParser -> def                            (1)
	%start_expParser -> exp                            (2)
	program -> '{' stmts '}'                           (3)
	stmts -> stmts ';' stmt                            (4)
	stmts -> stmt                                      (5)
	stmt -> def                                        (6)
	stmt -> exp                                        (7)
	def -> varDef                                      (8)
	def -> funcDef                                     (9)
	def -> typeDef                                     (10)
	funcDef -> funcDefLhs '=' exp                      (11)
	funcDefLhs -> var funcParams                       (12)
	funcParams -> funcParams patt                      (13)
	funcParams -> patt                                 (14)
	patt -> var                                        (15)
	patt -> constr                                     (16)
	patt -> '(' constructor ')'                        (17)
	varDef -> var '=' exp                              (18)
	typeDef -> var genTypeVars '::=' constructors      (19)
	constructors -> constructors '|' constructor       (20)
	constructors -> constructor                        (21)
	constructor -> constr constrTypes                  (22)
	constrTypes -> constrTypes constrArg               (23)
	constrTypes ->                                     (24)
	constrArg -> var                                   (25)
	constrArg -> genTypeVar                            (26)
	constrArg -> '(' constrArgs ')'                    (27)
	constrArgs -> constrArgs constrArg                 (28)
	constrArgs ->                                      (29)
	genTypeVars -> genTypeVars genTypeVar              (30)
	genTypeVars ->                                     (31)
	genTypeVar -> mult                                 (32)
	genTypeVar -> gtype_2plus                          (33)
	exp -> apply                                       (34)
	exp -> infixApp                                    (35)
	exp -> specialLit                                  (36)
	exp -> term                                        (37)
	apply -> exp term                                  (38)
	infixApp -> exp infixOp exp                        (39)
	infixOp -> plus                                    (40)
	infixOp -> minus                                   (41)
	infixOp -> mult                                    (42)
	infixOp -> div                                     (43)
	infixOp -> infix_var                               (44)
	term -> variable                                   (45)
	term -> constr                                     (46)
	term -> constant                                   (47)
	term -> '(' exp ')'                                (48)
	variable -> var                                    (49)
	constant -> const                                  (50)
	specialLit -> listLit                              (51)
	specialLit -> listColonLit                         (52)
	specialLit -> tupleLit                             (53)
	listLit -> '[' ']'                                 (54)
	listLit -> '[' commaSepExp ']'                     (55)
	listColonLit -> colonSepExp ':' exp                (56)
	tupleLit -> '(' commaSepExp ')'                    (57)
	commaSepExp -> commaSepExp ',' exp                 (58)
	commaSepExp -> exp                                 (59)
	colonSepExp -> colonSepExp ':' exp                 (60)
	colonSepExp -> exp                                 (61)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	const          { T.Constant $$ }
	constr         { T.Constructor $$ }
	var            { T.Variable $$ }
	plus           { T.InfixOp T.IPlus }
	minus          { T.InfixOp T.IMinus }
	mult           { T.InfixOp T.IMult }
	div            { T.InfixOp T.IDiv }
	infix_var      { T.InfixOp (T.IVar _) }
	gtype_2plus    { T.GenTypeVar $$ }
	'='            { T.Equal }
	'::='          { T.TypeEq }
	'('            { T.LP }
	')'            { T.RP }
	'['            { T.LB }
	']'            { T.RB }
	';'            { T.Semi }
	','            { T.Comma }
	':'            { T.Colon }
	'{'            { T.LC }
	'}'            { T.RC }
	'|'            { T.VertBar }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	%start_defParser rule  1
	%start_expParser rule  2
	program         rule  3
	stmts           rules 4, 5
	stmt            rules 6, 7
	def             rules 8, 9, 10
	funcDef         rule  11
	funcDefLhs      rule  12
	funcParams      rules 13, 14
	patt            rules 15, 16, 17
	varDef          rule  18
	typeDef         rule  19
	constructors    rules 20, 21
	constructor     rule  22
	constrTypes     rules 23, 24
	constrArg       rules 25, 26, 27
	constrArgs      rules 28, 29
	genTypeVars     rules 30, 31
	genTypeVar      rules 32, 33
	exp             rules 34, 35, 36, 37
	apply           rule  38
	infixApp        rule  39
	infixOp         rules 40, 41, 42, 43, 44
	term            rules 45, 46, 47, 48
	variable        rule  49
	constant        rule  50
	specialLit      rules 51, 52, 53
	listLit         rules 54, 55
	listColonLit    rule  56
	tupleLit        rule  57
	commaSepExp     rules 58, 59
	colonSepExp     rules 60, 61

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'{'            shift, and enter state 4

	program        goto state 27

State 1


	var            shift, and enter state 26

	def            goto state 21
	funcDef        goto state 22
	funcDefLhs     goto state 23
	varDef         goto state 24
	typeDef        goto state 25

State 2


	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 5
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 3


	'{'            shift, and enter state 4


State 4

	program -> '{' . stmts '}'                          (rule 3)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 54
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	stmts          goto state 50
	stmt           goto state 51
	def            goto state 52
	funcDef        goto state 22
	funcDefLhs     goto state 23
	varDef         goto state 24
	typeDef        goto state 25
	exp            goto state 53
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 5

	%start_expParser -> exp .                           (rule 2)
	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	':'            reduce using rule 61
	%eof           accept

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 6

	exp -> apply .                                      (rule 34)

	const          reduce using rule 34
	constr         reduce using rule 34
	var            reduce using rule 34
	plus           reduce using rule 34
	minus          reduce using rule 34
	mult           reduce using rule 34
	div            reduce using rule 34
	infix_var      reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	';'            reduce using rule 34
	','            reduce using rule 34
	':'            reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 7

	exp -> infixApp .                                   (rule 35)

	const          reduce using rule 35
	constr         reduce using rule 35
	var            reduce using rule 35
	plus           reduce using rule 35
	minus          reduce using rule 35
	mult           reduce using rule 35
	div            reduce using rule 35
	infix_var      reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	':'            reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 8

	exp -> term .                                       (rule 37)

	const          reduce using rule 37
	constr         reduce using rule 37
	var            reduce using rule 37
	plus           reduce using rule 37
	minus          reduce using rule 37
	mult           reduce using rule 37
	div            reduce using rule 37
	infix_var      reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	']'            reduce using rule 37
	';'            reduce using rule 37
	','            reduce using rule 37
	':'            reduce using rule 37
	'}'            reduce using rule 37
	%eof           reduce using rule 37


State 9

	term -> variable .                                  (rule 45)

	const          reduce using rule 45
	constr         reduce using rule 45
	var            reduce using rule 45
	plus           reduce using rule 45
	minus          reduce using rule 45
	mult           reduce using rule 45
	div            reduce using rule 45
	infix_var      reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	']'            reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	':'            reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 10

	term -> constant .                                  (rule 47)

	const          reduce using rule 47
	constr         reduce using rule 47
	var            reduce using rule 47
	plus           reduce using rule 47
	minus          reduce using rule 47
	mult           reduce using rule 47
	div            reduce using rule 47
	infix_var      reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	']'            reduce using rule 47
	';'            reduce using rule 47
	','            reduce using rule 47
	':'            reduce using rule 47
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 11

	exp -> specialLit .                                 (rule 36)

	const          reduce using rule 36
	constr         reduce using rule 36
	var            reduce using rule 36
	plus           reduce using rule 36
	minus          reduce using rule 36
	mult           reduce using rule 36
	div            reduce using rule 36
	infix_var      reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	']'            reduce using rule 36
	';'            reduce using rule 36
	','            reduce using rule 36
	':'            reduce using rule 36
	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 12

	specialLit -> listLit .                             (rule 51)

	const          reduce using rule 51
	constr         reduce using rule 51
	var            reduce using rule 51
	plus           reduce using rule 51
	minus          reduce using rule 51
	mult           reduce using rule 51
	div            reduce using rule 51
	infix_var      reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	']'            reduce using rule 51
	';'            reduce using rule 51
	','            reduce using rule 51
	':'            reduce using rule 51
	'}'            reduce using rule 51
	%eof           reduce using rule 51


State 13

	specialLit -> listColonLit .                        (rule 52)

	const          reduce using rule 52
	constr         reduce using rule 52
	var            reduce using rule 52
	plus           reduce using rule 52
	minus          reduce using rule 52
	mult           reduce using rule 52
	div            reduce using rule 52
	infix_var      reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	']'            reduce using rule 52
	';'            reduce using rule 52
	','            reduce using rule 52
	':'            reduce using rule 52
	'}'            reduce using rule 52
	%eof           reduce using rule 52


State 14

	specialLit -> tupleLit .                            (rule 53)

	const          reduce using rule 53
	constr         reduce using rule 53
	var            reduce using rule 53
	plus           reduce using rule 53
	minus          reduce using rule 53
	mult           reduce using rule 53
	div            reduce using rule 53
	infix_var      reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	']'            reduce using rule 53
	';'            reduce using rule 53
	','            reduce using rule 53
	':'            reduce using rule 53
	'}'            reduce using rule 53
	%eof           reduce using rule 53


State 15

	listColonLit -> colonSepExp . ':' exp               (rule 56)
	colonSepExp -> colonSepExp . ':' exp                (rule 60)

	':'            shift, and enter state 41


State 16

	constant -> const .                                 (rule 50)

	const          reduce using rule 50
	constr         reduce using rule 50
	var            reduce using rule 50
	plus           reduce using rule 50
	minus          reduce using rule 50
	mult           reduce using rule 50
	div            reduce using rule 50
	infix_var      reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	']'            reduce using rule 50
	';'            reduce using rule 50
	','            reduce using rule 50
	':'            reduce using rule 50
	'}'            reduce using rule 50
	%eof           reduce using rule 50


State 17

	term -> constr .                                    (rule 46)

	const          reduce using rule 46
	constr         reduce using rule 46
	var            reduce using rule 46
	plus           reduce using rule 46
	minus          reduce using rule 46
	mult           reduce using rule 46
	div            reduce using rule 46
	infix_var      reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	']'            reduce using rule 46
	';'            reduce using rule 46
	','            reduce using rule 46
	':'            reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 18

	variable -> var .                                   (rule 49)

	const          reduce using rule 49
	constr         reduce using rule 49
	var            reduce using rule 49
	plus           reduce using rule 49
	minus          reduce using rule 49
	mult           reduce using rule 49
	div            reduce using rule 49
	infix_var      reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	']'            reduce using rule 49
	';'            reduce using rule 49
	','            reduce using rule 49
	':'            reduce using rule 49
	'}'            reduce using rule 49
	%eof           reduce using rule 49


State 19

	term -> '(' . exp ')'                               (rule 48)
	tupleLit -> '(' . commaSepExp ')'                   (rule 57)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 39
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	commaSepExp    goto state 40
	colonSepExp    goto state 15

State 20

	listLit -> '[' . ']'                                (rule 54)
	listLit -> '[' . commaSepExp ']'                    (rule 55)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20
	']'            shift, and enter state 38

	exp            goto state 36
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	commaSepExp    goto state 37
	colonSepExp    goto state 15

State 21

	%start_defParser -> def .                           (rule 1)

	%eof           accept


State 22

	def -> funcDef .                                    (rule 9)

	';'            reduce using rule 9
	'}'            reduce using rule 9
	%eof           reduce using rule 9


State 23

	funcDef -> funcDefLhs . '=' exp                     (rule 11)

	'='            shift, and enter state 35


State 24

	def -> varDef .                                     (rule 8)

	';'            reduce using rule 8
	'}'            reduce using rule 8
	%eof           reduce using rule 8


State 25

	def -> typeDef .                                    (rule 10)

	';'            reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 26

	funcDefLhs -> var . funcParams                      (rule 12)
	varDef -> var . '=' exp                             (rule 18)
	typeDef -> var . genTypeVars '::=' constructors     (rule 19)

	constr         shift, and enter state 31
	var            shift, and enter state 32
	mult           reduce using rule 31
	gtype_2plus    reduce using rule 31
	'='            shift, and enter state 33
	'::='          reduce using rule 31
	'('            shift, and enter state 34

	funcParams     goto state 28
	patt           goto state 29
	genTypeVars    goto state 30

State 27

	%start_parser -> program .                          (rule 0)

	%eof           accept


State 28

	funcDefLhs -> var funcParams .                      (rule 12)
	funcParams -> funcParams . patt                     (rule 13)

	constr         shift, and enter state 31
	var            shift, and enter state 32
	'='            reduce using rule 12
	'('            shift, and enter state 34

	patt           goto state 72

State 29

	funcParams -> patt .                                (rule 14)

	constr         reduce using rule 14
	var            reduce using rule 14
	'='            reduce using rule 14
	'('            reduce using rule 14


State 30

	typeDef -> var genTypeVars . '::=' constructors     (rule 19)
	genTypeVars -> genTypeVars . genTypeVar             (rule 30)

	mult           shift, and enter state 69
	gtype_2plus    shift, and enter state 70
	'::='          shift, and enter state 71

	genTypeVar     goto state 68

State 31

	patt -> constr .                                    (rule 16)

	constr         reduce using rule 16
	var            reduce using rule 16
	'='            reduce using rule 16
	'('            reduce using rule 16


State 32

	patt -> var .                                       (rule 15)

	constr         reduce using rule 15
	var            reduce using rule 15
	'='            reduce using rule 15
	'('            reduce using rule 15


State 33

	varDef -> var '=' . exp                             (rule 18)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 67
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 34

	patt -> '(' . constructor ')'                       (rule 17)

	constr         shift, and enter state 66

	constructor    goto state 65

State 35

	funcDef -> funcDefLhs '=' . exp                     (rule 11)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 64
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 36

	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	commaSepExp -> exp .                                (rule 59)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	']'            reduce using rule 59
	','            reduce using rule 59
	':'            reduce using rule 61

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 37

	listLit -> '[' commaSepExp . ']'                    (rule 55)
	commaSepExp -> commaSepExp . ',' exp                (rule 58)

	']'            shift, and enter state 63
	','            shift, and enter state 61


State 38

	listLit -> '[' ']' .                                (rule 54)

	const          reduce using rule 54
	constr         reduce using rule 54
	var            reduce using rule 54
	plus           reduce using rule 54
	minus          reduce using rule 54
	mult           reduce using rule 54
	div            reduce using rule 54
	infix_var      reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	']'            reduce using rule 54
	';'            reduce using rule 54
	','            reduce using rule 54
	':'            reduce using rule 54
	'}'            reduce using rule 54
	%eof           reduce using rule 54


State 39

	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	term -> '(' exp . ')'                               (rule 48)
	commaSepExp -> exp .                                (rule 59)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	')'            shift, and enter state 62
			(reduce using rule 59)

	','            reduce using rule 59
	':'            reduce using rule 61

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 40

	tupleLit -> '(' commaSepExp . ')'                   (rule 57)
	commaSepExp -> commaSepExp . ',' exp                (rule 58)

	')'            shift, and enter state 60
	','            shift, and enter state 61


State 41

	listColonLit -> colonSepExp ':' . exp               (rule 56)
	colonSepExp -> colonSepExp ':' . exp                (rule 60)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 59
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 42

	infixApp -> exp infixOp . exp                       (rule 39)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 58
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 43

	apply -> exp term .                                 (rule 38)

	const          reduce using rule 38
	constr         reduce using rule 38
	var            reduce using rule 38
	plus           reduce using rule 38
	minus          reduce using rule 38
	mult           reduce using rule 38
	div            reduce using rule 38
	infix_var      reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	']'            reduce using rule 38
	';'            reduce using rule 38
	','            reduce using rule 38
	':'            reduce using rule 38
	'}'            reduce using rule 38
	%eof           reduce using rule 38


State 44

	infixOp -> plus .                                   (rule 40)

	const          reduce using rule 40
	constr         reduce using rule 40
	var            reduce using rule 40
	'('            reduce using rule 40
	'['            reduce using rule 40


State 45

	infixOp -> minus .                                  (rule 41)

	const          reduce using rule 41
	constr         reduce using rule 41
	var            reduce using rule 41
	'('            reduce using rule 41
	'['            reduce using rule 41


State 46

	infixOp -> mult .                                   (rule 42)

	const          reduce using rule 42
	constr         reduce using rule 42
	var            reduce using rule 42
	'('            reduce using rule 42
	'['            reduce using rule 42


State 47

	infixOp -> div .                                    (rule 43)

	const          reduce using rule 43
	constr         reduce using rule 43
	var            reduce using rule 43
	'('            reduce using rule 43
	'['            reduce using rule 43


State 48

	infixOp -> infix_var .                              (rule 44)

	const          reduce using rule 44
	constr         reduce using rule 44
	var            reduce using rule 44
	'('            reduce using rule 44
	'['            reduce using rule 44


State 49

	term -> '(' . exp ')'                               (rule 48)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 57
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 50

	program -> '{' stmts . '}'                          (rule 3)
	stmts -> stmts . ';' stmt                           (rule 4)

	';'            shift, and enter state 55
	'}'            shift, and enter state 56


State 51

	stmts -> stmt .                                     (rule 5)

	';'            reduce using rule 5
	'}'            reduce using rule 5


State 52

	stmt -> def .                                       (rule 6)

	';'            reduce using rule 6
	'}'            reduce using rule 6


State 53

	stmt -> exp .                                       (rule 7)
	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	';'            reduce using rule 7
	':'            reduce using rule 61
	'}'            reduce using rule 7

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 54

	funcDefLhs -> var . funcParams                      (rule 12)
	varDef -> var . '=' exp                             (rule 18)
	typeDef -> var . genTypeVars '::=' constructors     (rule 19)
	variable -> var .                                   (rule 49)

	const          reduce using rule 49
	constr         shift, and enter state 31
			(reduce using rule 49)

	var            shift, and enter state 32
			(reduce using rule 49)

	plus           reduce using rule 49
	minus          reduce using rule 49
	mult           reduce using rule 49
			(reduce using rule 31)

	div            reduce using rule 49
	infix_var      reduce using rule 49
	gtype_2plus    reduce using rule 31
	'='            shift, and enter state 33
	'::='          reduce using rule 31
	'('            shift, and enter state 34
			(reduce using rule 49)

	';'            reduce using rule 49
	':'            reduce using rule 49
	'}'            reduce using rule 49

	funcParams     goto state 28
	patt           goto state 29
	genTypeVars    goto state 30

State 55

	stmts -> stmts ';' . stmt                           (rule 4)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 54
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	stmt           goto state 78
	def            goto state 52
	funcDef        goto state 22
	funcDefLhs     goto state 23
	varDef         goto state 24
	typeDef        goto state 25
	exp            goto state 53
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 56

	program -> '{' stmts '}' .                          (rule 3)

	%eof           reduce using rule 3


State 57

	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	term -> '(' exp . ')'                               (rule 48)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	')'            shift, and enter state 62
	':'            reduce using rule 61

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 58

	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	infixApp -> exp infixOp exp .                       (rule 39)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
			(reduce using rule 39)

	constr         shift, and enter state 17
			(reduce using rule 39)

	var            shift, and enter state 18
			(reduce using rule 39)

	plus           shift, and enter state 44
			(reduce using rule 39)

	minus          shift, and enter state 45
			(reduce using rule 39)

	mult           shift, and enter state 46
			(reduce using rule 39)

	div            shift, and enter state 47
			(reduce using rule 39)

	infix_var      shift, and enter state 48
			(reduce using rule 39)

	'('            shift, and enter state 49
			(reduce using rule 39)

	')'            reduce using rule 39
	']'            reduce using rule 39
	';'            reduce using rule 39
	','            reduce using rule 39
	':'            reduce using rule 61
			(reduce using rule 39)

	'}'            reduce using rule 39
	%eof           reduce using rule 39

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 59

	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	listColonLit -> colonSepExp ':' exp .               (rule 56)
	colonSepExp -> colonSepExp ':' exp .                (rule 60)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
			(reduce using rule 56)

	constr         shift, and enter state 17
			(reduce using rule 56)

	var            shift, and enter state 18
			(reduce using rule 56)

	plus           shift, and enter state 44
			(reduce using rule 56)

	minus          shift, and enter state 45
			(reduce using rule 56)

	mult           shift, and enter state 46
			(reduce using rule 56)

	div            shift, and enter state 47
			(reduce using rule 56)

	infix_var      shift, and enter state 48
			(reduce using rule 56)

	'('            shift, and enter state 49
			(reduce using rule 56)

	')'            reduce using rule 56
	']'            reduce using rule 56
	';'            reduce using rule 56
	','            reduce using rule 56
	':'            reduce using rule 61
			(reduce using rule 60)
			(reduce using rule 56)

	'}'            reduce using rule 56
	%eof           reduce using rule 56

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 60

	tupleLit -> '(' commaSepExp ')' .                   (rule 57)

	const          reduce using rule 57
	constr         reduce using rule 57
	var            reduce using rule 57
	plus           reduce using rule 57
	minus          reduce using rule 57
	mult           reduce using rule 57
	div            reduce using rule 57
	infix_var      reduce using rule 57
	'('            reduce using rule 57
	')'            reduce using rule 57
	']'            reduce using rule 57
	';'            reduce using rule 57
	','            reduce using rule 57
	':'            reduce using rule 57
	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 61

	commaSepExp -> commaSepExp ',' . exp                (rule 58)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	'('            shift, and enter state 19
	'['            shift, and enter state 20

	exp            goto state 77
	apply          goto state 6
	infixApp       goto state 7
	term           goto state 8
	variable       goto state 9
	constant       goto state 10
	specialLit     goto state 11
	listLit        goto state 12
	listColonLit   goto state 13
	tupleLit       goto state 14
	colonSepExp    goto state 15

State 62

	term -> '(' exp ')' .                               (rule 48)

	const          reduce using rule 48
	constr         reduce using rule 48
	var            reduce using rule 48
	plus           reduce using rule 48
	minus          reduce using rule 48
	mult           reduce using rule 48
	div            reduce using rule 48
	infix_var      reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	']'            reduce using rule 48
	';'            reduce using rule 48
	','            reduce using rule 48
	':'            reduce using rule 48
	'}'            reduce using rule 48
	%eof           reduce using rule 48


State 63

	listLit -> '[' commaSepExp ']' .                    (rule 55)

	const          reduce using rule 55
	constr         reduce using rule 55
	var            reduce using rule 55
	plus           reduce using rule 55
	minus          reduce using rule 55
	mult           reduce using rule 55
	div            reduce using rule 55
	infix_var      reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	']'            reduce using rule 55
	';'            reduce using rule 55
	','            reduce using rule 55
	':'            reduce using rule 55
	'}'            reduce using rule 55
	%eof           reduce using rule 55


State 64

	funcDef -> funcDefLhs '=' exp .                     (rule 11)
	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	';'            reduce using rule 11
	':'            reduce using rule 61
	'}'            reduce using rule 11
	%eof           reduce using rule 11

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 65

	patt -> '(' constructor . ')'                       (rule 17)

	')'            shift, and enter state 76


State 66

	constructor -> constr . constrTypes                 (rule 22)

	var            reduce using rule 24
	mult           reduce using rule 24
	gtype_2plus    reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	';'            reduce using rule 24
	'}'            reduce using rule 24
	'|'            reduce using rule 24
	%eof           reduce using rule 24

	constrTypes    goto state 75

State 67

	varDef -> var '=' exp .                             (rule 18)
	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	';'            reduce using rule 18
	':'            reduce using rule 61
	'}'            reduce using rule 18
	%eof           reduce using rule 18

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 68

	genTypeVars -> genTypeVars genTypeVar .             (rule 30)

	mult           reduce using rule 30
	gtype_2plus    reduce using rule 30
	'::='          reduce using rule 30


State 69

	genTypeVar -> mult .                                (rule 32)

	var            reduce using rule 32
	mult           reduce using rule 32
	gtype_2plus    reduce using rule 32
	'::='          reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	';'            reduce using rule 32
	'}'            reduce using rule 32
	'|'            reduce using rule 32
	%eof           reduce using rule 32


State 70

	genTypeVar -> gtype_2plus .                         (rule 33)

	var            reduce using rule 33
	mult           reduce using rule 33
	gtype_2plus    reduce using rule 33
	'::='          reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	';'            reduce using rule 33
	'}'            reduce using rule 33
	'|'            reduce using rule 33
	%eof           reduce using rule 33


State 71

	typeDef -> var genTypeVars '::=' . constructors     (rule 19)

	constr         shift, and enter state 66

	constructors   goto state 73
	constructor    goto state 74

State 72

	funcParams -> funcParams patt .                     (rule 13)

	constr         reduce using rule 13
	var            reduce using rule 13
	'='            reduce using rule 13
	'('            reduce using rule 13


State 73

	typeDef -> var genTypeVars '::=' constructors .     (rule 19)
	constructors -> constructors . '|' constructor      (rule 20)

	';'            reduce using rule 19
	'}'            reduce using rule 19
	'|'            shift, and enter state 83
	%eof           reduce using rule 19


State 74

	constructors -> constructor .                       (rule 21)

	';'            reduce using rule 21
	'}'            reduce using rule 21
	'|'            reduce using rule 21
	%eof           reduce using rule 21


State 75

	constructor -> constr constrTypes .                 (rule 22)
	constrTypes -> constrTypes . constrArg              (rule 23)

	var            shift, and enter state 81
	mult           shift, and enter state 69
	gtype_2plus    shift, and enter state 70
	'('            shift, and enter state 82
	')'            reduce using rule 22
	';'            reduce using rule 22
	'}'            reduce using rule 22
	'|'            reduce using rule 22
	%eof           reduce using rule 22

	constrArg      goto state 79
	genTypeVar     goto state 80

State 76

	patt -> '(' constructor ')' .                       (rule 17)

	constr         reduce using rule 17
	var            reduce using rule 17
	'='            reduce using rule 17
	'('            reduce using rule 17


State 77

	apply -> exp . term                                 (rule 38)
	infixApp -> exp . infixOp exp                       (rule 39)
	commaSepExp -> commaSepExp ',' exp .                (rule 58)
	colonSepExp -> exp .                                (rule 61)

	const          shift, and enter state 16
	constr         shift, and enter state 17
	var            shift, and enter state 18
	plus           shift, and enter state 44
	minus          shift, and enter state 45
	mult           shift, and enter state 46
	div            shift, and enter state 47
	infix_var      shift, and enter state 48
	'('            shift, and enter state 49
	')'            reduce using rule 58
	']'            reduce using rule 58
	','            reduce using rule 58
	':'            reduce using rule 61

	infixOp        goto state 42
	term           goto state 43
	variable       goto state 9
	constant       goto state 10

State 78

	stmts -> stmts ';' stmt .                           (rule 4)

	';'            reduce using rule 4
	'}'            reduce using rule 4


State 79

	constrTypes -> constrTypes constrArg .              (rule 23)

	var            reduce using rule 23
	mult           reduce using rule 23
	gtype_2plus    reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	';'            reduce using rule 23
	'}'            reduce using rule 23
	'|'            reduce using rule 23
	%eof           reduce using rule 23


State 80

	constrArg -> genTypeVar .                           (rule 26)

	var            reduce using rule 26
	mult           reduce using rule 26
	gtype_2plus    reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	';'            reduce using rule 26
	'}'            reduce using rule 26
	'|'            reduce using rule 26
	%eof           reduce using rule 26


State 81

	constrArg -> var .                                  (rule 25)

	var            reduce using rule 25
	mult           reduce using rule 25
	gtype_2plus    reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	';'            reduce using rule 25
	'}'            reduce using rule 25
	'|'            reduce using rule 25
	%eof           reduce using rule 25


State 82

	constrArg -> '(' . constrArgs ')'                   (rule 27)

	var            reduce using rule 29
	mult           reduce using rule 29
	gtype_2plus    reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29

	constrArgs     goto state 85

State 83

	constructors -> constructors '|' . constructor      (rule 20)

	constr         shift, and enter state 66

	constructor    goto state 84

State 84

	constructors -> constructors '|' constructor .      (rule 20)

	';'            reduce using rule 20
	'}'            reduce using rule 20
	'|'            reduce using rule 20
	%eof           reduce using rule 20


State 85

	constrArg -> '(' constrArgs . ')'                   (rule 27)
	constrArgs -> constrArgs . constrArg                (rule 28)

	var            shift, and enter state 81
	mult           shift, and enter state 69
	gtype_2plus    shift, and enter state 70
	'('            shift, and enter state 82
	')'            shift, and enter state 87

	constrArg      goto state 86
	genTypeVar     goto state 80

State 86

	constrArgs -> constrArgs constrArg .                (rule 28)

	var            reduce using rule 28
	mult           reduce using rule 28
	gtype_2plus    reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28


State 87

	constrArg -> '(' constrArgs ')' .                   (rule 27)

	var            reduce using rule 27
	mult           reduce using rule 27
	gtype_2plus    reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	';'            reduce using rule 27
	'}'            reduce using rule 27
	'|'            reduce using rule 27
	%eof           reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 62
Number of terminals: 21
Number of non-terminals: 33
Number of states: 88
