-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from src/Miranda/Parser.y
-----------------------------------------------------------------------------

state 22 contains 3 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 57 contains 9 shift/reduce conflicts.

rule 50 is unused
rule 53 is unused
rule 54 is unused

terminal ':' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> program                           (0)
	%start_defParser -> def                            (1)
	program -> '{' exp '}'                             (2)
	program -> '{' defs ';' exp '}'                    (3)
	defs -> defs ';' def                               (4)
	defs -> def                                        (5)
	def -> funcDef                                     (6)
	def -> varDef                                      (7)
	def -> typeDef                                     (8)
	funcDef -> var funcParams '=' exp                  (9)
	funcParams -> funcParams patt                      (10)
	funcParams -> patt                                 (11)
	patt -> var                                        (12)
	patt -> constr                                     (13)
	patt -> '(' constructor ')'                        (14)
	varDef -> var '=' exp                              (15)
	typeDef -> var genTypeVars '::=' constructors      (16)
	constructors -> constructors '|' constructor       (17)
	constructors -> constructor                        (18)
	constructor -> constr constrTypes                  (19)
	constrTypes -> constrTypes constrArg               (20)
	constrTypes ->                                     (21)
	constrArg -> var                                   (22)
	constrArg -> genTypeVar                            (23)
	constrArg -> '(' constrArgs ')'                    (24)
	constrArgs -> constrArgs constrArg                 (25)
	constrArgs ->                                      (26)
	genTypeVars -> genTypeVars genTypeVar              (27)
	genTypeVars ->                                     (28)
	genTypeVar -> mult                                 (29)
	genTypeVar -> gtype_2plus                          (30)
	exp -> apply                                       (31)
	exp -> infixApp                                    (32)
	exp -> listLit                                     (33)
	exp -> term                                        (34)
	apply -> exp term                                  (35)
	infixApp -> exp infixOp exp                        (36)
	infixOp -> plus                                    (37)
	infixOp -> minus                                   (38)
	infixOp -> mult                                    (39)
	infixOp -> div                                     (40)
	infixOp -> infix_var                               (41)
	term -> variable                                   (42)
	term -> constr                                     (43)
	term -> constant                                   (44)
	term -> '(' exp ')'                                (45)
	variable -> var                                    (46)
	constant -> const                                  (47)
	listLit -> '[' ']'                                 (48)
	listLit -> '[' commaSepExp ']'                     (49)
	listColonLit -> colonSepExp ':' exp                (50)
	commaSepExp -> commaSepExp ',' exp                 (51)
	commaSepExp -> exp                                 (52)
	colonSepExp -> colonSepExp ':' exp                 (53)
	colonSepExp -> exp                                 (54)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	const          { T.Constant $$ }
	constr         { T.Constructor $$ }
	var            { T.Variable $$ }
	plus           { T.InfixOp T.IPlus }
	minus          { T.InfixOp T.IMinus }
	mult           { T.InfixOp T.IMult }
	div            { T.InfixOp T.IDiv }
	infix_var      { T.InfixOp (T.IVar _) }
	gtype_2plus    { T.GenTypeVar $$ }
	'='            { T.Equal }
	'::='          { T.TypeEq }
	'('            { T.LP }
	')'            { T.RP }
	'['            { T.LB }
	']'            { T.RB }
	';'            { T.Semi }
	','            { T.Comma }
	':'            { T.Colon }
	'{'            { T.LC }
	'}'            { T.RC }
	'|'            { T.VertBar }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	%start_defParser rule  1
	program         rules 2, 3
	defs            rules 4, 5
	def             rules 6, 7, 8
	funcDef         rule  9
	funcParams      rules 10, 11
	patt            rules 12, 13, 14
	varDef          rule  15
	typeDef         rule  16
	constructors    rules 17, 18
	constructor     rule  19
	constrTypes     rules 20, 21
	constrArg       rules 22, 23, 24
	constrArgs      rules 25, 26
	genTypeVars     rules 27, 28
	genTypeVar      rules 29, 30
	exp             rules 31, 32, 33, 34
	apply           rule  35
	infixApp        rule  36
	infixOp         rules 37, 38, 39, 40, 41
	term            rules 42, 43, 44, 45
	variable        rule  46
	constant        rule  47
	listLit         rules 48, 49
	listColonLit    rule  50
	commaSepExp     rules 51, 52
	colonSepExp     rules 53, 54

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'{'            shift, and enter state 10

	program        goto state 9

State 1


	var            shift, and enter state 8

	def            goto state 4
	funcDef        goto state 5
	varDef         goto state 6
	typeDef        goto state 7

State 2


	'{'            shift, and enter state 3


State 3

	program -> '{' . exp '}'                            (rule 2)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	exp            goto state 13
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 4

	%start_defParser -> def .                           (rule 1)

	%eof           accept


State 5

	def -> funcDef .                                    (rule 6)

	';'            reduce using rule 6
	%eof           reduce using rule 6


State 6

	def -> varDef .                                     (rule 7)

	';'            reduce using rule 7
	%eof           reduce using rule 7


State 7

	def -> typeDef .                                    (rule 8)

	';'            reduce using rule 8
	%eof           reduce using rule 8


State 8

	funcDef -> var . funcParams '=' exp                 (rule 9)
	varDef -> var . '=' exp                             (rule 15)
	typeDef -> var . genTypeVars '::=' constructors     (rule 16)

	constr         shift, and enter state 28
	var            shift, and enter state 29
	mult           reduce using rule 28
	gtype_2plus    reduce using rule 28
	'='            shift, and enter state 30
	'::='          reduce using rule 28
	'('            shift, and enter state 31

	funcParams     goto state 25
	patt           goto state 26
	genTypeVars    goto state 27

State 9

	%start_parser -> program .                          (rule 0)

	%eof           accept


State 10

	program -> '{' . exp '}'                            (rule 2)
	program -> '{' . defs ';' exp '}'                   (rule 3)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 22
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	defs           goto state 11
	def            goto state 12
	funcDef        goto state 5
	varDef         goto state 6
	typeDef        goto state 7
	exp            goto state 13
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 11

	program -> '{' defs . ';' exp '}'                   (rule 3)
	defs -> defs . ';' def                              (rule 4)

	';'            shift, and enter state 54


State 12

	defs -> def .                                       (rule 5)

	';'            reduce using rule 5


State 13

	program -> '{' exp . '}'                            (rule 2)
	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	'}'            shift, and enter state 53

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 14

	exp -> apply .                                      (rule 31)

	const          reduce using rule 31
	constr         reduce using rule 31
	var            reduce using rule 31
	plus           reduce using rule 31
	minus          reduce using rule 31
	mult           reduce using rule 31
	div            reduce using rule 31
	infix_var      reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	']'            reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 15

	exp -> infixApp .                                   (rule 32)

	const          reduce using rule 32
	constr         reduce using rule 32
	var            reduce using rule 32
	plus           reduce using rule 32
	minus          reduce using rule 32
	mult           reduce using rule 32
	div            reduce using rule 32
	infix_var      reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	']'            reduce using rule 32
	';'            reduce using rule 32
	','            reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 16

	exp -> term .                                       (rule 34)

	const          reduce using rule 34
	constr         reduce using rule 34
	var            reduce using rule 34
	plus           reduce using rule 34
	minus          reduce using rule 34
	mult           reduce using rule 34
	div            reduce using rule 34
	infix_var      reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	']'            reduce using rule 34
	';'            reduce using rule 34
	','            reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 17

	term -> variable .                                  (rule 42)

	const          reduce using rule 42
	constr         reduce using rule 42
	var            reduce using rule 42
	plus           reduce using rule 42
	minus          reduce using rule 42
	mult           reduce using rule 42
	div            reduce using rule 42
	infix_var      reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	']'            reduce using rule 42
	';'            reduce using rule 42
	','            reduce using rule 42
	'}'            reduce using rule 42
	%eof           reduce using rule 42


State 18

	term -> constant .                                  (rule 44)

	const          reduce using rule 44
	constr         reduce using rule 44
	var            reduce using rule 44
	plus           reduce using rule 44
	minus          reduce using rule 44
	mult           reduce using rule 44
	div            reduce using rule 44
	infix_var      reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	']'            reduce using rule 44
	';'            reduce using rule 44
	','            reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 19

	exp -> listLit .                                    (rule 33)

	const          reduce using rule 33
	constr         reduce using rule 33
	var            reduce using rule 33
	plus           reduce using rule 33
	minus          reduce using rule 33
	mult           reduce using rule 33
	div            reduce using rule 33
	infix_var      reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	']'            reduce using rule 33
	';'            reduce using rule 33
	','            reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 20

	constant -> const .                                 (rule 47)

	const          reduce using rule 47
	constr         reduce using rule 47
	var            reduce using rule 47
	plus           reduce using rule 47
	minus          reduce using rule 47
	mult           reduce using rule 47
	div            reduce using rule 47
	infix_var      reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	']'            reduce using rule 47
	';'            reduce using rule 47
	','            reduce using rule 47
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 21

	term -> constr .                                    (rule 43)

	const          reduce using rule 43
	constr         reduce using rule 43
	var            reduce using rule 43
	plus           reduce using rule 43
	minus          reduce using rule 43
	mult           reduce using rule 43
	div            reduce using rule 43
	infix_var      reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	']'            reduce using rule 43
	';'            reduce using rule 43
	','            reduce using rule 43
	'}'            reduce using rule 43
	%eof           reduce using rule 43


State 22

	funcDef -> var . funcParams '=' exp                 (rule 9)
	varDef -> var . '=' exp                             (rule 15)
	typeDef -> var . genTypeVars '::=' constructors     (rule 16)
	variable -> var .                                   (rule 46)

	const          reduce using rule 46
	constr         shift, and enter state 28
			(reduce using rule 46)

	var            shift, and enter state 29
			(reduce using rule 46)

	plus           reduce using rule 46
	minus          reduce using rule 46
	mult           reduce using rule 46
			(reduce using rule 28)

	div            reduce using rule 46
	infix_var      reduce using rule 46
	gtype_2plus    reduce using rule 28
	'='            shift, and enter state 30
	'::='          reduce using rule 28
	'('            shift, and enter state 31
			(reduce using rule 46)

	'}'            reduce using rule 46

	funcParams     goto state 25
	patt           goto state 26
	genTypeVars    goto state 27

State 23

	term -> '(' . exp ')'                               (rule 45)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	exp            goto state 45
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 24

	listLit -> '[' . ']'                                (rule 48)
	listLit -> '[' . commaSepExp ']'                    (rule 49)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24
	']'            shift, and enter state 44

	exp            goto state 42
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19
	commaSepExp    goto state 43

State 25

	funcDef -> var funcParams . '=' exp                 (rule 9)
	funcParams -> funcParams . patt                     (rule 10)

	constr         shift, and enter state 28
	var            shift, and enter state 29
	'='            shift, and enter state 41
	'('            shift, and enter state 31

	patt           goto state 40

State 26

	funcParams -> patt .                                (rule 11)

	constr         reduce using rule 11
	var            reduce using rule 11
	'='            reduce using rule 11
	'('            reduce using rule 11


State 27

	typeDef -> var genTypeVars . '::=' constructors     (rule 16)
	genTypeVars -> genTypeVars . genTypeVar             (rule 27)

	mult           shift, and enter state 37
	gtype_2plus    shift, and enter state 38
	'::='          shift, and enter state 39

	genTypeVar     goto state 36

State 28

	patt -> constr .                                    (rule 13)

	constr         reduce using rule 13
	var            reduce using rule 13
	'='            reduce using rule 13
	'('            reduce using rule 13


State 29

	patt -> var .                                       (rule 12)

	constr         reduce using rule 12
	var            reduce using rule 12
	'='            reduce using rule 12
	'('            reduce using rule 12


State 30

	varDef -> var '=' . exp                             (rule 15)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	exp            goto state 35
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 31

	patt -> '(' . constructor ')'                       (rule 14)

	constr         shift, and enter state 34

	constructor    goto state 33

State 32

	variable -> var .                                   (rule 46)

	const          reduce using rule 46
	constr         reduce using rule 46
	var            reduce using rule 46
	plus           reduce using rule 46
	minus          reduce using rule 46
	mult           reduce using rule 46
	div            reduce using rule 46
	infix_var      reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	']'            reduce using rule 46
	';'            reduce using rule 46
	','            reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 33

	patt -> '(' constructor . ')'                       (rule 14)

	')'            shift, and enter state 65


State 34

	constructor -> constr . constrTypes                 (rule 19)

	var            reduce using rule 21
	mult           reduce using rule 21
	gtype_2plus    reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	';'            reduce using rule 21
	'|'            reduce using rule 21
	%eof           reduce using rule 21

	constrTypes    goto state 64

State 35

	varDef -> var '=' exp .                             (rule 15)
	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	';'            reduce using rule 15
	%eof           reduce using rule 15

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 36

	genTypeVars -> genTypeVars genTypeVar .             (rule 27)

	mult           reduce using rule 27
	gtype_2plus    reduce using rule 27
	'::='          reduce using rule 27


State 37

	genTypeVar -> mult .                                (rule 29)

	var            reduce using rule 29
	mult           reduce using rule 29
	gtype_2plus    reduce using rule 29
	'::='          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	';'            reduce using rule 29
	'|'            reduce using rule 29
	%eof           reduce using rule 29


State 38

	genTypeVar -> gtype_2plus .                         (rule 30)

	var            reduce using rule 30
	mult           reduce using rule 30
	gtype_2plus    reduce using rule 30
	'::='          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	';'            reduce using rule 30
	'|'            reduce using rule 30
	%eof           reduce using rule 30


State 39

	typeDef -> var genTypeVars '::=' . constructors     (rule 16)

	constr         shift, and enter state 34

	constructors   goto state 62
	constructor    goto state 63

State 40

	funcParams -> funcParams patt .                     (rule 10)

	constr         reduce using rule 10
	var            reduce using rule 10
	'='            reduce using rule 10
	'('            reduce using rule 10


State 41

	funcDef -> var funcParams '=' . exp                 (rule 9)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	exp            goto state 61
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 42

	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)
	commaSepExp -> exp .                                (rule 52)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	']'            reduce using rule 52
	','            reduce using rule 52

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 43

	listLit -> '[' commaSepExp . ']'                    (rule 49)
	commaSepExp -> commaSepExp . ',' exp                (rule 51)

	']'            shift, and enter state 59
	','            shift, and enter state 60


State 44

	listLit -> '[' ']' .                                (rule 48)

	const          reduce using rule 48
	constr         reduce using rule 48
	var            reduce using rule 48
	plus           reduce using rule 48
	minus          reduce using rule 48
	mult           reduce using rule 48
	div            reduce using rule 48
	infix_var      reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	']'            reduce using rule 48
	';'            reduce using rule 48
	','            reduce using rule 48
	'}'            reduce using rule 48
	%eof           reduce using rule 48


State 45

	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)
	term -> '(' exp . ')'                               (rule 45)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	')'            shift, and enter state 58

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 46

	infixApp -> exp infixOp . exp                       (rule 36)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	exp            goto state 57
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 47

	apply -> exp term .                                 (rule 35)

	const          reduce using rule 35
	constr         reduce using rule 35
	var            reduce using rule 35
	plus           reduce using rule 35
	minus          reduce using rule 35
	mult           reduce using rule 35
	div            reduce using rule 35
	infix_var      reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	']'            reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 48

	infixOp -> plus .                                   (rule 37)

	const          reduce using rule 37
	constr         reduce using rule 37
	var            reduce using rule 37
	'('            reduce using rule 37
	'['            reduce using rule 37


State 49

	infixOp -> minus .                                  (rule 38)

	const          reduce using rule 38
	constr         reduce using rule 38
	var            reduce using rule 38
	'('            reduce using rule 38
	'['            reduce using rule 38


State 50

	infixOp -> mult .                                   (rule 39)

	const          reduce using rule 39
	constr         reduce using rule 39
	var            reduce using rule 39
	'('            reduce using rule 39
	'['            reduce using rule 39


State 51

	infixOp -> div .                                    (rule 40)

	const          reduce using rule 40
	constr         reduce using rule 40
	var            reduce using rule 40
	'('            reduce using rule 40
	'['            reduce using rule 40


State 52

	infixOp -> infix_var .                              (rule 41)

	const          reduce using rule 41
	constr         reduce using rule 41
	var            reduce using rule 41
	'('            reduce using rule 41
	'['            reduce using rule 41


State 53

	program -> '{' exp '}' .                            (rule 2)

	%eof           reduce using rule 2


State 54

	program -> '{' defs ';' . exp '}'                   (rule 3)
	defs -> defs ';' . def                              (rule 4)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 22
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	def            goto state 55
	funcDef        goto state 5
	varDef         goto state 6
	typeDef        goto state 7
	exp            goto state 56
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 55

	defs -> defs ';' def .                              (rule 4)

	';'            reduce using rule 4


State 56

	program -> '{' defs ';' exp . '}'                   (rule 3)
	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	'}'            shift, and enter state 72

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 57

	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)
	infixApp -> exp infixOp exp .                       (rule 36)

	const          shift, and enter state 20
			(reduce using rule 36)

	constr         shift, and enter state 21
			(reduce using rule 36)

	var            shift, and enter state 32
			(reduce using rule 36)

	plus           shift, and enter state 48
			(reduce using rule 36)

	minus          shift, and enter state 49
			(reduce using rule 36)

	mult           shift, and enter state 50
			(reduce using rule 36)

	div            shift, and enter state 51
			(reduce using rule 36)

	infix_var      shift, and enter state 52
			(reduce using rule 36)

	'('            shift, and enter state 23
			(reduce using rule 36)

	')'            reduce using rule 36
	']'            reduce using rule 36
	';'            reduce using rule 36
	','            reduce using rule 36
	'}'            reduce using rule 36
	%eof           reduce using rule 36

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 58

	term -> '(' exp ')' .                               (rule 45)

	const          reduce using rule 45
	constr         reduce using rule 45
	var            reduce using rule 45
	plus           reduce using rule 45
	minus          reduce using rule 45
	mult           reduce using rule 45
	div            reduce using rule 45
	infix_var      reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	']'            reduce using rule 45
	';'            reduce using rule 45
	','            reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 59

	listLit -> '[' commaSepExp ']' .                    (rule 49)

	const          reduce using rule 49
	constr         reduce using rule 49
	var            reduce using rule 49
	plus           reduce using rule 49
	minus          reduce using rule 49
	mult           reduce using rule 49
	div            reduce using rule 49
	infix_var      reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	']'            reduce using rule 49
	';'            reduce using rule 49
	','            reduce using rule 49
	'}'            reduce using rule 49
	%eof           reduce using rule 49


State 60

	commaSepExp -> commaSepExp ',' . exp                (rule 51)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	'('            shift, and enter state 23
	'['            shift, and enter state 24

	exp            goto state 71
	apply          goto state 14
	infixApp       goto state 15
	term           goto state 16
	variable       goto state 17
	constant       goto state 18
	listLit        goto state 19

State 61

	funcDef -> var funcParams '=' exp .                 (rule 9)
	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	';'            reduce using rule 9
	%eof           reduce using rule 9

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 62

	typeDef -> var genTypeVars '::=' constructors .     (rule 16)
	constructors -> constructors . '|' constructor      (rule 17)

	';'            reduce using rule 16
	'|'            shift, and enter state 70
	%eof           reduce using rule 16


State 63

	constructors -> constructor .                       (rule 18)

	';'            reduce using rule 18
	'|'            reduce using rule 18
	%eof           reduce using rule 18


State 64

	constructor -> constr constrTypes .                 (rule 19)
	constrTypes -> constrTypes . constrArg              (rule 20)

	var            shift, and enter state 68
	mult           shift, and enter state 37
	gtype_2plus    shift, and enter state 38
	'('            shift, and enter state 69
	')'            reduce using rule 19
	';'            reduce using rule 19
	'|'            reduce using rule 19
	%eof           reduce using rule 19

	constrArg      goto state 66
	genTypeVar     goto state 67

State 65

	patt -> '(' constructor ')' .                       (rule 14)

	constr         reduce using rule 14
	var            reduce using rule 14
	'='            reduce using rule 14
	'('            reduce using rule 14


State 66

	constrTypes -> constrTypes constrArg .              (rule 20)

	var            reduce using rule 20
	mult           reduce using rule 20
	gtype_2plus    reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	';'            reduce using rule 20
	'|'            reduce using rule 20
	%eof           reduce using rule 20


State 67

	constrArg -> genTypeVar .                           (rule 23)

	var            reduce using rule 23
	mult           reduce using rule 23
	gtype_2plus    reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	';'            reduce using rule 23
	'|'            reduce using rule 23
	%eof           reduce using rule 23


State 68

	constrArg -> var .                                  (rule 22)

	var            reduce using rule 22
	mult           reduce using rule 22
	gtype_2plus    reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	';'            reduce using rule 22
	'|'            reduce using rule 22
	%eof           reduce using rule 22


State 69

	constrArg -> '(' . constrArgs ')'                   (rule 24)

	var            reduce using rule 26
	mult           reduce using rule 26
	gtype_2plus    reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26

	constrArgs     goto state 74

State 70

	constructors -> constructors '|' . constructor      (rule 17)

	constr         shift, and enter state 34

	constructor    goto state 73

State 71

	apply -> exp . term                                 (rule 35)
	infixApp -> exp . infixOp exp                       (rule 36)
	commaSepExp -> commaSepExp ',' exp .                (rule 51)

	const          shift, and enter state 20
	constr         shift, and enter state 21
	var            shift, and enter state 32
	plus           shift, and enter state 48
	minus          shift, and enter state 49
	mult           shift, and enter state 50
	div            shift, and enter state 51
	infix_var      shift, and enter state 52
	'('            shift, and enter state 23
	']'            reduce using rule 51
	','            reduce using rule 51

	infixOp        goto state 46
	term           goto state 47
	variable       goto state 17
	constant       goto state 18

State 72

	program -> '{' defs ';' exp '}' .                   (rule 3)

	%eof           reduce using rule 3


State 73

	constructors -> constructors '|' constructor .      (rule 17)

	';'            reduce using rule 17
	'|'            reduce using rule 17
	%eof           reduce using rule 17


State 74

	constrArg -> '(' constrArgs . ')'                   (rule 24)
	constrArgs -> constrArgs . constrArg                (rule 25)

	var            shift, and enter state 68
	mult           shift, and enter state 37
	gtype_2plus    shift, and enter state 38
	'('            shift, and enter state 69
	')'            shift, and enter state 76

	constrArg      goto state 75
	genTypeVar     goto state 67

State 75

	constrArgs -> constrArgs constrArg .                (rule 25)

	var            reduce using rule 25
	mult           reduce using rule 25
	gtype_2plus    reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25


State 76

	constrArg -> '(' constrArgs ')' .                   (rule 24)

	var            reduce using rule 24
	mult           reduce using rule 24
	gtype_2plus    reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	';'            reduce using rule 24
	'|'            reduce using rule 24
	%eof           reduce using rule 24


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 55
Number of terminals: 21
Number of non-terminals: 28
Number of states: 77
